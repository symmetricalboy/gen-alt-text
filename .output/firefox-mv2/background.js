var background=function(){"use strict";var d,u;function p(o){return o==null||typeof o=="function"?{main:o}:o}const l=(u=(d=globalThis.browser)==null?void 0:d.runtime)!=null&&u.id?globalThis.browser:globalThis.chrome,y=p(()=>{console.log("Bluesky Alt Text Generator background script loaded (Proxy Mode)");const o="https://us-central1-symm-gemini.cloudfunctions.net/generateAltTextProxy",f=r=>new Promise((e,t)=>{const n=new FileReader;n.onloadend=()=>e(n.result),n.onerror=t,n.readAsDataURL(r)});async function g(r){if(r.startsWith("data:")){console.log("[getBase64Data] Source is Data URL, extracting...");const e=r.match(/^data:(.+?);base64,(.*)$/);if(!e||e.length<3)throw console.error("[getBase64Data] Invalid Data URL format received:",r.substring(0,100)+"..."),new Error("Invalid Data URL format received");const t=e[1],n=e[2];if(!t.includes("/")||!n)throw new Error("Extracted mimeType or base64 data appears invalid.");return{base64Data:n,mimeType:t}}else if(r.startsWith("http:")||r.startsWith("https:")){console.log("[getBase64Data] Source is HTTP(S) URL, fetching...",r);try{const e=await fetch(r);if(!e.ok)throw new Error(`Failed to fetch URL: ${e.status} ${e.statusText}`);const t=await e.blob(),n=await f(t);return console.log("[getBase64Data] Successfully fetched and converted URL to Data URL."),await g(n)}catch(e){throw console.error("[getBase64Data] Error fetching or converting URL:",e),new Error(`Failed to fetch or process media URL: ${e instanceof Error?e.message:e}`)}}else throw console.error("[getBase64Data] ERROR: Received unsupported source type:",r.substring(0,100)+"..."),new Error("Background script received an unsupported source type.")}async function b(r,e){try{const{base64Data:t,mimeType:n}=await g(r);console.log(`Sending request to proxy for ${n}`);const a=await fetch(o,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({base64Data:t,mimeType:n})}),s=await a.json();return a.ok?s&&typeof s.altText=="string"?{altText:s.altText}:(console.error("Unexpected successful response format from proxy:",s),{error:"Received invalid response format from proxy service."}):(console.error("Proxy function returned an error:",a.status,s),{error:`AI Proxy Error: ${(s==null?void 0:s.error)||a.statusText||`Proxy request failed with status ${a.status}`}`})}catch(t){return console.error("Error calling alt text proxy:",t),{error:`Network/Request Error: ${t instanceof Error?t.message:"Unknown error communicating with proxy"}`}}}l.runtime.onConnect.addListener(r=>{r.name==="altTextGenerator"?(r.onMessage.addListener(async e=>{if(e&&e.action==="generateAltText"&&typeof e.mediaUrl=="string"&&typeof e.isVideo=="boolean"){console.log(`Port request: Generate alt text for ${e.mediaUrl.substring(0,60)}..., isVideo: ${e.isVideo}`);const t=await b(e.mediaUrl,e.isVideo);console.log("Sending result back via port:",t);try{r?r.postMessage(t):console.warn("Port disconnected before response could be sent.")}catch(n){console.error("Error posting message back via port (port might have disconnected):",n)}}else console.warn("Received unknown or invalid message format via port:",e)}),r.onDisconnect.addListener(()=>{console.log(`Port ${r.name} disconnected.`)})):console.warn(`Unexpected port connection ignored: ${r.name}`)}),l.runtime.onMessage.addListener((r,e,t)=>(r==null?void 0:r.type)==="MEDIA_INTERCEPTED"?(console.log("MEDIA_INTERCEPTED received, but auto-processing via proxy is currently disabled."),t({status:"Intercepted (auto-processing disabled)"}),!1):(console.log("Ignoring unknown general message type:",r==null?void 0:r.type),!1)),console.log("Background script proxy mode event listeners attached.")});function x(){}function i(o,...f){}const h={debug:(...o)=>i(console.debug,...o),log:(...o)=>i(console.log,...o),warn:(...o)=>i(console.warn,...o),error:(...o)=>i(console.error,...o)};let c;try{c=y.main(),c instanceof Promise&&console.warn("The background's main() function return a promise, but it must be synchronous")}catch(o){throw h.error("The background crashed on startup!"),o}return c}();
background;
