var bskyaltgenerator=function(){"use strict";var Q=Object.defineProperty;var Z=(v,p,u)=>p in v?Q(v,p,{enumerable:!0,configurable:!0,writable:!0,value:u}):v[p]=u;var x=(v,p,u)=>Z(v,typeof p!="symbol"?p+"":p,u);var V,O;function v(c){return c}const u=(O=(V=globalThis.browser)==null?void 0:V.runtime)!=null&&O.id?globalThis.browser:globalThis.chrome,q={matches:["*://*.bsky.app/*"],main(){if(console.log("Bluesky Alt Text Generator loaded"),typeof window>"u"||typeof document>"u")return;const o=['textarea[aria-label="Alt text"]','textarea[placeholder*="alt"]','textarea[placeholder*="Alt"]','textarea[data-testid*="alt"]','[role="textbox"][aria-label*="alt" i]'].join(","),l="gemini-alt-text-button";let s={autoMode:!1,showToasts:!0};async function f(){try{const t=await u.storage.local.get(["autoMode","showToasts"]);t&&(s={...s,...t}),console.log("Loaded config:",s)}catch(t){console.error("Error loading config from storage:",t)}}f(),u.storage.onChanged.addListener((t,i)=>{i==="local"&&(t.autoMode&&(s.autoMode=t.autoMode.newValue,console.log("[Storage Listener] autoMode changed to:",s.autoMode)),t.showToasts&&(s.showToasts=t.showToasts.newValue,console.log("[Storage Listener] showToasts changed to:",s.showToasts)),t.autoMode&&$())});const h=t=>{const i=[t.closest('[data-testid="imagePreview"]'),t.closest('[data-testid="videoPreview"]'),t.closest('[data-testid*="composer"]'),document.body],a=['button[aria-label*="alt text" i]','button[title*="alt text" i]','button:has(svg[aria-label*="alt" i])','button:contains("ALT")','button:contains("Add alt text")'];for(const r of i)if(r)for(const n of a)try{const e=r.querySelector(n);if(e&&e.offsetParent!==null)return console.log(`[findAltTextTriggerButton] Found button with selector "${n}" near`,t,e),e}catch{}return console.warn("[findAltTextTriggerButton] Could not find alt text trigger button for",t),null},w=t=>t&&typeof t.click=="function"?(console.log("[clickElement] Clicking:",t),t.click(),!0):(console.warn("[clickElement] Element not found or not clickable:",t),!1),k=t=>{console.log("[waitForAltTextInputAndGenerate] Waiting for alt text input after clicking:",t);const i=100,a=5e3;let r=0;const n=setInterval(()=>{var m;r+=i;const e=document.querySelector('[role="dialog"] [aria-label*="alt text" i]');let d=null;if(e&&(d=e.querySelector("textarea")),d||(d=document.querySelector(o)),d&&d.offsetParent!==null){console.log("[waitForAltTextInputAndGenerate] Found alt text textarea:",d),clearInterval(n);let M=((m=d.parentElement)==null?void 0:m.querySelector(`#${l}`))||null;M&&M.offsetParent!==null?(console.log("[waitForAltTextInputAndGenerate] Found our generate button, clicking:",M),w(M)):(console.warn("[waitForAltTextInputAndGenerate] Generate button not immediately found, will retry shortly..."),setTimeout(()=>{var E;const g=(E=d==null?void 0:d.parentElement)==null?void 0:E.querySelector(`#${l}`);g&&g.offsetParent!==null?(console.log("[waitForAltTextInputAndGenerate] Found generate button on retry, clicking:",g),w(g)):console.error("[waitForAltTextInputAndGenerate] Failed to find our generate button near textarea after retry:",d)},500))}else r>=a&&(console.error("[waitForAltTextInputAndGenerate] Timed out waiting for alt text textarea."),clearInterval(n))},i)};let y=null;const z=()=>{y&&y.disconnect(),console.log("[observeMediaForAutoMode] Starting observer for media additions."),y=new MutationObserver(t=>{if(s.autoMode)for(const i of t)i.type==="childList"&&i.addedNodes.forEach(a=>{a instanceof HTMLElement&&(a.matches("img[src], video[src]")?[a]:Array.from(a.querySelectorAll("img[src], video[src]"))).forEach(n=>{if(n.offsetWidth<50||n.offsetHeight<50||n.closest('[data-testid*="avatar"]')){console.log("[observeMediaForAutoMode] Skipping small/avatar media:",n);return}if(n._autoAltTriggered)return;n._autoAltTriggered=!0,console.log("[observeMediaForAutoMode] Detected new media:",n);const e=h(n);w(e)&&k(e),setTimeout(()=>{delete n._autoAltTriggered},3e3)})})}),y.observe(document.body,{childList:!0,subtree:!0}),console.log("[observeMediaForAutoMode] Observer attached to document body.")},N=(t,i="info",a=8e3)=>{let r=document.getElementById("gemini-toast-container");r||(r=document.createElement("div"),r.id="gemini-toast-container",Object.assign(r.style,{position:"fixed",bottom:"20px",right:"20px",zIndex:"10000",display:"flex",flexDirection:"column",gap:"10px"}),document.body.appendChild(r));const n=document.createElement("div");Object.assign(n.style,{padding:"12px 16px",borderRadius:"6px",boxShadow:"0 2px 8px rgba(0, 0, 0, 0.15)",margin:"5px",minWidth:"200px",color:"#ffffff",fontSize:"14px",transition:"all 0.3s ease"});const e={success:"#1da882",error:"#e53935",warning:"#f59f0b",info:"#007eda"};n.style.backgroundColor=e[i]||e.info,n.textContent=t;const d=document.createElement("span");d.textContent="Ã—",Object.assign(d.style,{marginLeft:"8px",cursor:"pointer",float:"right",fontWeight:"bold"}),d.onclick=()=>{n.parentNode===r&&r.removeChild(n)},n.appendChild(d),r.appendChild(n),setTimeout(()=>{n.parentNode===r&&r.removeChild(n)},a)},X=t=>{console.log("[findMediaElement - Simplified] Searching for media in container:",t);const i=r=>{if(!r)return!1;const n=r.getBoundingClientRect();return n.width>0&&n.height>0&&r.offsetParent!==null},a=['[data-testid="imagePreview"] img[src]','[data-testid="images"] img[src]','[data-testid="videoPreview"] video[src]','[data-testid="videos"] video[src]','[data-testid="videoPreview"] video source[src]','[data-testid="videos"] video source[src]','img[src]:not([alt*="avatar" i]):not([src*="avatar"])',"video[src]","video source[src]"];for(const r of a){const n=t.querySelector(r);if(n instanceof HTMLSourceElement){const e=n.closest("video");if(e&&i(e))return console.log(`[findMediaElement - Simplified] Found video via source selector: ${r}`,e),e;console.warn(`[findMediaElement - Simplified] Found source tag but parent video hidden/invalid: ${r}`,n);continue}if(n&&i(n))return console.log(`[findMediaElement - Simplified] Found media via direct selector: ${r}`,n),n;n&&console.warn(`[findMediaElement - Simplified] Media found but hidden/too small with selector: ${r}`,n)}return console.error("[findMediaElement - Simplified] FAILED: No suitable media found using direct selectors."),null};async function Y(t){if(!t||!t.src)return console.warn("[getMediaAsDataUrl] Invalid element or src"),null;const i=t.src;if(i.startsWith("data:"))return console.log("[getMediaAsDataUrl] Source is already Data URL"),i;if(i.startsWith("blob:")||i.startsWith("http")){console.log("[getMediaAsDataUrl] Fetching source URL:",i);try{const a=await fetch(i);if(!a.ok)throw new Error(`Failed to fetch media URL: ${a.statusText} (${a.status})`);const r=await a.blob();return console.log("[getMediaAsDataUrl] Fetched blob, type:",r.type),new Promise((n,e)=>{const d=new FileReader;d.onloadend=()=>{typeof d.result=="string"?(console.log("[getMediaAsDataUrl] Blob converted to base64 Data URL"),n(d.result)):e(new Error("Blob reader result was not a string."))},d.onerror=m=>{console.error("[getMediaAsDataUrl] FileReader error:",m),e(new Error("FileReader error reading blob."))},d.readAsDataURL(r)})}catch(a){return console.error("[getMediaAsDataUrl] Error fetching or converting URL:",a),null}}else return console.warn("[getMediaAsDataUrl] Unhandled URL scheme:",i),null}function D(t){if(t.dataset.geminiButtonAdded==="true")return;console.log("[addGenerateButton] Starting for textarea:",t);const i=J(t);if(!i){console.error("[addGenerateButton] Could not find the context container (composePostView, Add alt text, or Video settings) for the textarea. Button not added.");return}console.log("[addGenerateButton] Found context container for textarea:",i);let a=null;if(i.matches('[aria-label="Video settings"]')){if(console.log('[addGenerateButton] Context is "Video settings", searching document for [data-testid="composePostView"]...'),a=document.querySelector('[data-testid="composePostView"]'),!a){console.error('[addGenerateButton] Context is "Video settings", but failed to find [data-testid="composePostView"] in the document for media search.');return}console.log('[addGenerateButton] Context is "Video settings", found composePostView in document for media search:',a)}else a=i,console.log("[addGenerateButton] Context is composePostView or Add alt text, targeting context container for media search:",a);if(a.querySelector(`#${l}`)){console.log("[addGenerateButton] Button already exists in the media search container, marking textarea and skipping UI creation."),t.dataset.geminiButtonAdded="true";return}const r=t.parentElement;if(!r){console.error("[addGenerateButton] Could not find a suitable attach point (parentElement) for the button UI near the textarea.");return}const n=document.createElement("div");Object.assign(n.style,{display:"flex",alignItems:"center",gap:"8px",marginTop:"4px",justifyContent:"flex-end"});const e=document.createElement("button");e.id=l,e.title="Generate Alt Text";const d=u.runtime.getURL("/icon/gen-alt-text.svg");e.innerHTML=`<img src="${d}" alt="Generate Alt Text Icon" width="20" height="20" style="display: block;">`,Object.assign(e.style,{marginLeft:"8px",padding:"4px",cursor:"pointer",border:"1px solid #ccc",borderRadius:"4px",backgroundColor:"#f0f0f0",display:"flex",alignItems:"center",justifyContent:"center"}),e.style.setProperty("visibility","visible","important"),e.style.setProperty("z-index","9999","important"),e.style.setProperty("position","relative","important");const m=e.innerHTML;n.appendChild(e);const M=async()=>{if(e.innerHTML="",e.textContent="Finding Media...",e.style.color="#000000",e.disabled=!0,!a){console.error("[generateAltText] mediaSearchContainer is null! Cannot search for media."),e.textContent="Error: Internal",e.style.color="#000000",setTimeout(()=>{e.innerHTML=m,e.style.color="",e.disabled=!1},3e3);return}console.log("[generateAltText] Searching for media within determined media search container:",a);const g=X(a);if(console.log("[generateAltText] Media element found in search container:",g),!g||!(g instanceof HTMLImageElement||g instanceof HTMLVideoElement)){console.error("[generateAltText] Could not find valid media element."),e.textContent="Error: No Media",e.style.color="#000000",setTimeout(()=>{e.innerHTML=m,e.style.color="",e.disabled=!1},2e3);return}e.textContent="Processing Media...",e.style.color="#000000";const E=await Y(g);if(!E){console.error("[generateAltText] Failed to get media as Data URL."),e.textContent="Error: Process Fail",e.style.color="#000000",setTimeout(()=>{e.innerHTML=m,e.style.color="",e.disabled=!1},3e3);return}const _=g.tagName==="VIDEO";console.log(`[generateAltText] Got ${_?"Video":"Image"} as Data URL (length: ${E.length})`);try{console.log("[generateAltText] Connecting to background..."),e.textContent="Connecting...",e.style.color="#000000";const S=u.runtime.connect({name:"altTextGenerator"});console.log("[generateAltText] Connection established."),e.textContent="Generating...",e.style.color="#000000",S.onMessage.addListener(b=>{console.log("[generateAltText] Msg from background:",b);let T="",G=!1;if(b.altText)t.value=b.altText,t.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!0})),T="âœ“ Done",s.showToasts&&N("Alt text generated! ðŸ¤– Double-check it before posting, AI can make mistakes.","success",8e3);else if(b.error){const R=typeof b.error=="string"?b.error:"Unknown error";T=`Error: ${R.substring(0,20)}...`,G=!0,s.showToasts&&N(`Error: ${R}`,"error")}else T="Msg Format Err",G=!0,console.error("[generateAltText] Unexpected message format:",b);e.textContent=T,e.style.color="#000000",setTimeout(()=>{e.innerHTML=m,e.style.color="",e.disabled=!1},G?3e3:1500);try{S.disconnect()}catch{}}),S.onDisconnect.addListener(()=>{const b=u.runtime.lastError;console.error("[generateAltText] Port disconnected.",b||"(No error info)");const T=e.textContent;T&&!T.includes("Done")&&!T.includes("Error")&&(e.textContent="Disconnect Err",e.style.color="#000000",setTimeout(()=>{e.innerHTML=m,e.style.color="",e.disabled=!1},3e3))}),console.log("[generateAltText] Sending message..."),S.postMessage({action:"generateAltText",imageUrl:E,isVideo:_}),console.log("[generateAltText] Message sent.")}catch(S){console.error("[generateAltText] Connect/Post error:",S),e.textContent="Connect Error",e.style.color="#000000",setTimeout(()=>{e.innerHTML=m,e.style.color="",e.disabled=!1},2e3)}};e.onclick=async g=>{g.preventDefault(),g.stopPropagation(),console.log("[addGenerateButton] Button clicked"),await M()},r.insertAdjacentElement("afterend",n),t.dataset.geminiButtonAdded="true",console.log("[addGenerateButton] Button UI setup complete and attached.")}function J(t){console.log("[findComposerContainer] Searching from:",t);const i=['[data-testid="composePostView"]','[aria-label="Add alt text"]','[aria-label="Video settings"]'];for(const a of i){const r=t.closest(a);if(r&&r.contains(t))return console.log("[findComposerContainer] Found valid container via specific selector:",a,r),r}return console.error("[findComposerContainer] Failed to find any container using specific selectors:",i.join(", ")),null}let A=null;const K=()=>{A&&A.disconnect(),console.log("[observeAltTextAreas] Starting observer for manual button injection."),document.querySelectorAll(o).forEach(D),A=new MutationObserver(t=>{if(!s.autoMode)for(const i of t)i.type==="childList"&&i.addedNodes.forEach(a=>{a instanceof HTMLElement&&(a.matches(o)&&D(a),a.querySelectorAll(o).forEach(D))}),i.type==="attributes"&&i.target instanceof HTMLElement&&i.target.matches(o)&&D(i.target)}),A.observe(document.body,{childList:!0,subtree:!0,attributes:!0,attributeFilter:["aria-label","placeholder","data-testid","role"]}),console.log("[observeAltTextAreas] Observer attached to document body.")},$=()=>{console.log("[observeDOMChanges] Evaluating mode. Auto Mode is currently:",s.autoMode),s.autoMode?(A&&(console.log("[observeDOMChanges] Disconnecting manualModeObserver."),A.disconnect()),z()):(y&&(console.log("[observeDOMChanges] Disconnecting autoModeMediaObserver."),y.disconnect()),K())};f().then(()=>{console.log("[Initial Setup] Config loaded, initiating observeDOMChanges."),$()}),console.log("Bluesky Alt Text Generator content script setup complete.")}};function I(c,...o){}const H={debug:(...c)=>I(console.debug,...c),log:(...c)=>I(console.log,...c),warn:(...c)=>I(console.warn,...c),error:(...c)=>I(console.error,...c)},F=class F extends Event{constructor(o,l){super(F.EVENT_NAME,{}),this.newUrl=o,this.oldUrl=l}};x(F,"EVENT_NAME",P("wxt:locationchange"));let U=F;function P(c){var o;return`${(o=u==null?void 0:u.runtime)==null?void 0:o.id}:bsky_alt_generator:${c}`}function W(c){let o,l;return{run(){o==null&&(l=new URL(location.href),o=c.setInterval(()=>{let s=new URL(location.href);s.href!==l.href&&(window.dispatchEvent(new U(s,l)),l=s)},1e3))}}}const C=class C{constructor(o,l){x(this,"isTopFrame",window.self===window.top);x(this,"abortController");x(this,"locationWatcher",W(this));x(this,"receivedMessageIds",new Set);this.contentScriptName=o,this.options=l,this.abortController=new AbortController,this.isTopFrame?(this.listenForNewerScripts({ignoreFirstEvent:!0}),this.stopOldScripts()):this.listenForNewerScripts()}get signal(){return this.abortController.signal}abort(o){return this.abortController.abort(o)}get isInvalid(){return u.runtime.id==null&&this.notifyInvalidated(),this.signal.aborted}get isValid(){return!this.isInvalid}onInvalidated(o){return this.signal.addEventListener("abort",o),()=>this.signal.removeEventListener("abort",o)}block(){return new Promise(()=>{})}setInterval(o,l){const s=setInterval(()=>{this.isValid&&o()},l);return this.onInvalidated(()=>clearInterval(s)),s}setTimeout(o,l){const s=setTimeout(()=>{this.isValid&&o()},l);return this.onInvalidated(()=>clearTimeout(s)),s}requestAnimationFrame(o){const l=requestAnimationFrame((...s)=>{this.isValid&&o(...s)});return this.onInvalidated(()=>cancelAnimationFrame(l)),l}requestIdleCallback(o,l){const s=requestIdleCallback((...f)=>{this.signal.aborted||o(...f)},l);return this.onInvalidated(()=>cancelIdleCallback(s)),s}addEventListener(o,l,s,f){var h;l==="wxt:locationchange"&&this.isValid&&this.locationWatcher.run(),(h=o.addEventListener)==null||h.call(o,l.startsWith("wxt:")?P(l):l,s,{...f,signal:this.signal})}notifyInvalidated(){this.abort("Content script context invalidated"),H.debug(`Content script "${this.contentScriptName}" context invalidated`)}stopOldScripts(){window.postMessage({type:C.SCRIPT_STARTED_MESSAGE_TYPE,contentScriptName:this.contentScriptName,messageId:Math.random().toString(36).slice(2)},"*")}verifyScriptStartedEvent(o){var h,w,k;const l=((h=o.data)==null?void 0:h.type)===C.SCRIPT_STARTED_MESSAGE_TYPE,s=((w=o.data)==null?void 0:w.contentScriptName)===this.contentScriptName,f=!this.receivedMessageIds.has((k=o.data)==null?void 0:k.messageId);return l&&s&&f}listenForNewerScripts(o){let l=!0;const s=f=>{if(this.verifyScriptStartedEvent(f)){this.receivedMessageIds.add(f.data.messageId);const h=l;if(l=!1,h&&(o!=null&&o.ignoreFirstEvent))return;this.notifyInvalidated()}};addEventListener("message",s),this.onInvalidated(()=>removeEventListener("message",s))}};x(C,"SCRIPT_STARTED_MESSAGE_TYPE",P("wxt:content-script-started"));let B=C;function ee(){}function L(c,...o){}const j={debug:(...c)=>L(console.debug,...c),log:(...c)=>L(console.log,...c),warn:(...c)=>L(console.warn,...c),error:(...c)=>L(console.error,...c)};return(async()=>{try{const{main:c,...o}=q,l=new B("bsky_alt_generator",o);return await c(l)}catch(c){throw j.error('The content script "bsky_alt_generator" crashed on startup!',c),c}})()}();
bskyaltgenerator;
